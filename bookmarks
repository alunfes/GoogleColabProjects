import asyncio
import pandas as pd
from playwright.async_api import async_playwright


async def extract_table_data():
    try:
        async with async_playwright() as playwright:
            browser = await playwright.firefox.launch(headless=True)  # Launching in non-headless mode to visually verify the table
            #page = await browser.new_page()
            context = await browser.new_context(java_script_enabled=True)  # Enable JavaScript
            # Create a new page within the context
            page = await context.new_page()
            # Navigate to the webpage containing the table
            res = await page.goto("https://www.nseindia.com/resources/exchange-communication-holidays")
            if res.status != 200:
                print('Failed to load page!')
                print(res)
            else:
                # Wait for the table to be visible
                await page.wait_for_selector('#holidayTable')
                await page.wait_for_timeout(1000)
                # Extracting data from the table
                data = await page.evaluate('''() => {
                    const rows = Array.from(document.querySelectorAll('#holidayTable tbody tr'));
                    return rows.map(row => {
                        const cells = Array.from(row.querySelectorAll('td'));
                        return cells.map(cell => cell.textContent.trim());
                    });
                }''')
                # Printing the extracted data
                df = pd.DataFrame(data, columns=['Sr. No', 'Date', 'Day', 'Description'])
                print(df)
    except Exception as e:
        print("エラーが発生しました:", e)
    finally:
        await browser.close()
        

asyncio.run(extract_table_data())





#https://www.bseindia.com/static/markets/marketinfo/listholi.aspx

import asyncio
import pandas as pd
from playwright.async_api import async_playwright


async def extract_table_data():
    async with async_playwright() as playwright:
        browser = await playwright.firefox.launch(headless=True)  # Launching in non-headless mode to visually verify the table
        #page = await browser.new_page()
        context = await browser.new_context(java_script_enabled=True)  # Enable JavaScript
        # Create a new page within the context
        page = await context.new_page()
        # Navigate to the webpage containing the table
        res = await page.goto("https://www.bseindia.com/static/markets/marketinfo/listholi.aspx")
        if res.status != 200:
            print('Failed to load page!')
            print(res)
        else:
            try:
                # Wait for the table to be visible
                await page.wait_for_selector('xpath=/html/body/form/div[4]/div/div/div[3]/div/div/div/div/table[1]')
                await page.wait_for_timeout(1000)
                # Extracting data from the table
                # テーブル内のデータを取得する
                table_data = await page.evaluate('''() => {
                    const rows = Array.from(document.querySelectorAll('table tbody tr'));
                    return rows.map(row => {
                        const rowData = Array.from(row.querySelectorAll('td'));
                        return rowData.map(cell => cell.innerText.trim());
                    });
                }''') 
                # データフレームを作成するために有効な行をフィルタリングする
                valid_rows = [row for row in table_data if len(row) == 4]
                # 最初の行を列名として除外して、データフレームを作成する
                df = pd.DataFrame(valid_rows[1:], columns=valid_rows[0])
                print(df)
            except Exception as e:
                print("エラーが発生しました:", e)
        await browser.close()
        

asyncio.run(extract_table_data())
